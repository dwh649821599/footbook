# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'login.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QWidget, QMainWindow, QApplication, QScrollArea, QDesktopWidget, QRadioButton, QScrollBar, \
    QPlainTextEdit, QLabel, QPushButton, QLineEdit, QMenu, QTableWidgetItem, QHBoxLayout, QVBoxLayout, QFileDialog
from PyQt5.QtGui import QPainter, QPen, QFont, QIcon, QPixmap, QCursor
from PyQt5.QtCore import Qt, QPoint, QCoreApplication, QRect
import gui.gui2network as ct
import sys, pickle, os
from pathlib import Path
import cv2
import gui.homepage as hp


class Login(object):
    def __init__(self, Mainwindow):
        super(Login, self).__init__()
        self.setupUi(Mainwindow)
        self.cthandle = ct.ClientWrapper()
        self.userhead = None

    def setupUi(self, Mainwindow):
        MainWindow.setWindowFlags(Qt.FramelessWindowHint)
        # MainWindow.setAttribute(Qt.WA_TranslucentBackground)
        Mainwindow.setObjectName("Mainwindow")
        # MainWindow.setWindowModality(QtCore.Qt.NonModal)
        MainWindow.setEnabled(True)
        Mainwindow.resize(300, 360)
        Mainwindow.setMinimumSize(QtCore.QSize(300, 360))
        Mainwindow.setMaximumSize(QtCore.QSize(300, 360))

        self.mw = MainWindow
        self.mw.setWindowTitle('footbook')

        # 登录出错组件
        self.loginerror = QtWidgets.QWidget(MainWindow)
        self.loginerror.setObjectName("loginerror")
        self.loginerror.setGeometry(QtCore.QRect(0, 30, 300, 360))
        self.loginerror.setHidden(True)

        self.loginerrorlabel = QLabel(self.loginerror)
        self.loginerrorlabel.setGeometry(QtCore.QRect(40, 100, 220, 60))
        self.loginerrorlabel.setObjectName("loginerrorlabel")
        self.loginerrorlabel.setFont(QFont('微软雅黑', 16))
        self.loginerrorlabel.setAlignment(Qt.AlignCenter)

        self.loginerrorbtn = QPushButton(self.loginerror)
        self.loginerrorbtn.setGeometry(QtCore.QRect(120, 180, 60, 30))
        self.loginerrorbtn.setObjectName("loginerrorbtn")
        self.loginerrorbtn.setText('确定')
        self.loginerrorbtn.setCursor(QCursor(Qt.PointingHandCursor))

        # 注册组件
        self.registerwidget = QWidget(MainWindow)
        self.registerwidget.setObjectName("registerwidget")
        self.registerwidget.setGeometry(QtCore.QRect(0, 30, 300, 360))
        self.registerwidget.setHidden(True)

        self.rhead = QtWidgets.QPushButton(self.registerwidget)
        self.rhead.setGeometry(QtCore.QRect(120, 10, 60, 60))
        self.rhead.setObjectName("rhead")
        self.rhead.setText('请选择\n头像')
        self.rhead.setFont(QFont('微软雅黑', 10))
        self.rhead.setCursor(QCursor(Qt.PointingHandCursor))

        self.rid = QtWidgets.QLineEdit(self.registerwidget)
        self.rid.setGeometry(QtCore.QRect(40, 80, 220, 30))
        self.rid.setObjectName("rid")
        self.rid.setText('123')
        self.rid.setPlaceholderText('用户名')
        self.rid.setClearButtonEnabled(True)

        self.rname = QtWidgets.QLineEdit(self.registerwidget)
        self.rname.setGeometry(QtCore.QRect(40, 130, 220, 30))
        self.rname.setObjectName("rname")
        self.rname.setText('NoobKLD')
        self.rname.setPlaceholderText('昵称')
        self.rname.setClearButtonEnabled(True)

        self.rpsw = QtWidgets.QLineEdit(self.registerwidget)
        self.rpsw.setGeometry(QtCore.QRect(40, 180, 220, 30))
        self.rpsw.setObjectName("rpsw")
        self.rpsw.setText('123')
        self.rpsw.setPlaceholderText('密码')
        self.rpsw.setEchoMode(QLineEdit.Password)
        self.rpsw.setClearButtonEnabled(True)

        self.registerOKbtn = QtWidgets.QPushButton(self.registerwidget)
        self.registerOKbtn.setGeometry(QtCore.QRect(40, 250, 90, 30))
        self.registerOKbtn.setObjectName("registerOKbtn")
        self.registerOKbtn.setText('注册')
        self.registerOKbtn.setCursor(QCursor(Qt.PointingHandCursor))

        self.registerNObtn = QtWidgets.QPushButton(self.registerwidget)
        self.registerNObtn.setGeometry(QtCore.QRect(170, 250, 90, 30))
        self.registerNObtn.setObjectName("registerNObtn")
        self.registerNObtn.setText('取消')
        self.registerNObtn.setCursor(QCursor(Qt.PointingHandCursor))

        # 注册出错组件
        self.rerror = QtWidgets.QWidget(MainWindow)
        self.rerror.setObjectName("rerror")
        self.rerror.setGeometry(QtCore.QRect(0, 30, 300, 360))
        self.rerror.setHidden(True)

        self.rerrorlabel = QLabel(self.rerror)
        self.rerrorlabel.setGeometry(QtCore.QRect(40, 130, 220, 30))
        self.rerrorlabel.setObjectName("rerrorlabel")
        self.rerrorlabel.setFont(QFont('微软雅黑', 16))
        self.rerrorlabel.setAlignment(Qt.AlignCenter)

        self.rerrorbtn = QPushButton(self.rerror)
        self.rerrorbtn.setGeometry(QtCore.QRect(120, 180, 60, 30))
        self.rerrorbtn.setObjectName("rerrorbtn")
        self.rerrorbtn.setText('确定')
        self.rerrorbtn.setCursor(QCursor(Qt.PointingHandCursor))

        # 登录主组件
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.centralwidget.setGeometry(QtCore.QRect(0, 30, 300, 360))

        self.title = QLabel(self.mw)
        self.title.setText('FootBook')
        self.title.setGeometry(QtCore.QRect(6, 6, 100, 20))
        self.title.setFont(QFont('微软雅黑', 10))

        self.loginbtn = QtWidgets.QPushButton(self.centralwidget)
        self.loginbtn.setGeometry(QtCore.QRect(40, 240, 221, 31))
        self.loginbtn.setObjectName("loginbtn")
        self.loginbtn.setCursor(QCursor(Qt.PointingHandCursor))

        df = Path('./user/default')
        if not df.is_file():
            with open('./user/default', 'w') as f:
                f.write('False\n')
        with open('./user/default', 'r') as f:
            isSave = f.readline()[:-1]
            id = f.readline()[:-1]
            psw = f.readline()[:-1]
            head = f.readline()

        self.uid = QtWidgets.QLineEdit(self.centralwidget)
        self.uid.setGeometry(QtCore.QRect(40, 100, 221, 31))
        self.uid.setObjectName("uid")
        if isSave == 'True':
            self.uid.setText(id)
        self.uid.setPlaceholderText('账号')
        self.uid.setClearButtonEnabled(True)

        self.psw = QtWidgets.QLineEdit(self.centralwidget)
        self.psw.setGeometry(QtCore.QRect(40, 150, 221, 31))
        self.psw.setObjectName("psw")
        if isSave == 'True':
            self.psw.setText(psw)
        self.psw.setPlaceholderText('密码')
        self.psw.setEchoMode(QLineEdit.Password)
        self.psw.setClearButtonEnabled(True)

        self.remPsw = QtWidgets.QCheckBox(self.centralwidget)
        self.remPsw.setGeometry(QtCore.QRect(40, 200, 100, 21))
        self.remPsw.setObjectName("remPsw")
        if isSave == 'True':
            self.remPsw.setChecked(True)

        self.registerbtn = QtWidgets.QPushButton(self.centralwidget)
        self.registerbtn.setGeometry(QtCore.QRect(0, 300, 70, 20))
        self.registerbtn.setObjectName("registerbtn")
        self.registerbtn.setCursor(QCursor(Qt.PointingHandCursor))

        self.forgetPswBtn = QtWidgets.QPushButton(self.centralwidget)
        self.forgetPswBtn.setGeometry(QtCore.QRect(230, 195, 30, 30))
        self.forgetPswBtn.setObjectName("forgetPswBtn")
        self.registerbtn.setCursor(QCursor(Qt.PointingHandCursor))

        self.pic = QtWidgets.QLabel(self.centralwidget)
        self.pic.setGeometry(QtCore.QRect(130, 30, 50, 50))
        self.pic.setObjectName("pic")
        self.pic.setStyleSheet(f'border-image:url({head});')

        self.closebtn = QtWidgets.QPushButton(self.mw)
        self.closebtn.setGeometry(QtCore.QRect(270, 0, 30, 30))
        self.closebtn.setText("")
        self.closebtn.setObjectName("closebtn")
        self.minbtn = QtWidgets.QPushButton(self.mw)
        self.minbtn.setGeometry(QtCore.QRect(240, 0, 30, 30))
        self.minbtn.setText("")
        self.minbtn.setObjectName("minbtn")

        self.retranslateUi(Mainwindow)
        QtCore.QMetaObject.connectSlotsByName(Mainwindow)

        self.closebtn.clicked.connect(self.closepage)
        self.minbtn.clicked.connect(self.minimize)
        self.loginbtn.clicked.connect(self.login)
        self.loginerrorbtn.clicked.connect(self.return2login)
        self.registerbtn.clicked.connect(self.registerpage)
        self.registerOKbtn.clicked.connect(self.register)
        self.registerNObtn.clicked.connect(self.return2login)
        self.rhead.clicked.connect(self.chooseHead)
        self.rerrorbtn.clicked.connect(self.return2login)

        self.setqss(Mainwindow)

    def login(self):
        id = self.uid.text()
        password = self.psw.text()
        islogin, reason = self.cthandle.login(id, password)
        # 登陆失败
        if not islogin:
            if len(str(reason)) > 10:
                reason = str(reason)[:10] + '\n' + str(reason)[10:]
            self.loginerrorlabel.setText(str(reason))
            self.centralwidget.setHidden(True)
            self.loginerror.setVisible(True)
        # 登陆成功
        else:
            self.mw.close()
            info = self.cthandle.get_init_info()
            if self.remPsw.isChecked():
                with open(f'./user/default', 'w') as f:
                    f.write(f'True\n{id}\n{password}\n./user/{id}/head.png')
            else:
                with open(f'./user/default', 'w') as f:
                    f.write(f'False\n{id}\n{password}\n./user/{id}/head.png')
            path = os.getcwd()
            if not os.path.exists(path + f'\\user\\{id}'):
                os.mkdir(path + f'\\user\\{id}')
            if not os.path.exists(path + f'\\user\\{id}\\friends'):
                os.mkdir(path + f'\\user\\{id}\\friends')
            with open(f'./user/{id}/{id}.info', 'wb') as f:
                pickle.dump(info, f)
            with open(f'./user/{id}/head.png', 'wb') as f:
                f.write(info['head'])
            for i in info['friends']:
                with open(f"./user/{id}/friends/{str(i['id'])}.info", 'wb') as f:
                    pickle.dump(i, f)
                with open(f'./user/{id}/friends/head{str(i["id"])}.png', 'wb') as f:
                    f.write(i['head'])

            homepagewindow = QtWidgets.QMainWindow()
            self.homepage = hp.Homepage(homepagewindow, self.cthandle)
            homepagewindow.show()

    def return2login(self):
        self.rid.clear()
        self.rname.clear()
        self.rpsw.clear()
        self.centralwidget.setVisible(True)
        self.registerwidget.setHidden(True)
        self.loginerror.setHidden(True)
        self.rerror.setHidden(True)

    def registerpage(self):
        self.centralwidget.setHidden(True)
        self.uid.clear()
        self.psw.clear()
        self.registerwidget.setVisible(True)

    def chooseHead(self):
        head, _ = QFileDialog.getOpenFileName(self.mw, '选择头像', os.getcwd(), "Image files (*.jpg *.gif *.png *.jpeg)")
        if _:
            img = cv2.imread(head)
            print(img.shape)
            img = cv2.resize(img, (60, 60))
            cv2.imwrite('temp/head.png', img)
            self.rhead.setText('')
            self.rhead.setStyleSheet('border-image:url(./temp/head.png);')

    def register(self):
        print(self.userhead)
        if self.userhead is None:
            head = 'pic/pic.jpg'
        else:
            head = self.userhead
        print(head)
        rid = self.rid.text()
        rname = self.rname.text()
        rpsw = self.rpsw.text()
        with open(head, 'rb') as f:
            headimg = f.read()
        isregister, reason = self.cthandle.sign_in({'id': rid, 'name': rname, 'password': rpsw, 'sex': '保密',
                             'address': '', 'hometown': '',
                             'occupation': '', 'birthday': '1970-1-1',
                             'introduction': '', 'head': headimg})
        print(isregister, reason)
        if not isregister:
            self.rerrorlabel.setText(str(reason))
            self.registerwidget.setHidden(True)
            self.rerror.setVisible(True)
        else:
            self.rerrorlabel.setText('注册成功')
            self.registerwidget.setHidden(True)
            self.rerror.setVisible(True)
        self.userhead = None
        self.rhead.setText('请选择\n头像')
        self.rhead.setStyleSheet('')


    def closepage(self):
        self.mw.close()

    def minimize(self):
        self.mw.setWindowState(Qt.WindowMinimized)

    def setqss(self, MainWindow):
        with open('login.qss', 'r') as f:
             qssStyle = f.read()
        MainWindow.setStyleSheet(qssStyle)

    def retranslateUi(self, Mainwindow):
        _translate = QtCore.QCoreApplication.translate
        Mainwindow.setWindowTitle(_translate("Mainwindow", "MainWindow"))
        self.loginbtn.setText(_translate("Mainwindow", "登录"))
        self.remPsw.setText(_translate("Mainwindow", "记住密码"))
        self.registerbtn.setText(_translate("Mainwindow", "注册账号"))

if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Login(MainWindow)

    # ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())